$colorWhite: #ffffff;
$colorPrimary: #98474f;



$breakpoints: (
	xs: (
    min: null,
    max: 479px
  ),
	sm: (
    min: 480px,
    max: 767px
  ),
  md: (
    min: 768px,
    max: 1024px
  ),
  lg: (
    min: 1025px,
    max: 1280px
  ),
	xl: (
    min: 1281px,
    max: 1440px
  ),
  xxl: (
    min: 1441px,
    max: 1920px
  ),
  xxxl: (
    min: 1921px,
    max: null
  )
);

// // make a shorthand for accessing $breakpoints
$bp: $breakpoints;

// bp (feature, breakpoint[, OPTIONAL_WITHIN_MAX_VALUE]} mixin
// these mixins build breakpoints mixins based off of the breakpoint matrix in the main configuration file
//      or from a custom number entered into the mixin
//
// Paramters:
//      - $feature: ["min, "max", "within"] - string indicating whether to declare min-width, max-width or within a min and max on the media query
//      - $breakpoint: ["md", 1000px ] - either a string referenceing a key value from $breakpoints or a number (with pixel units)
//
// usage example:
//
//      // pull in the values from the already established 'mdd' key in the $breakpoints map
//      // uses min-width in the media query
//      .someclass {
//          @include bp('min', 'md') {
//              some: style;
//          }
//          @include bp('max', 'sm') {
//              anther: style;
//          }
//      }
//
//      // use a custom breakpoint
//      // uses max-width in the media query
//      .someclass {
//          @include bp('max', 500px) {
//              some: style;
//          }
//          @include bp('min', 1000px) {
//              some: style;
//          }
//      }
//
//      // use the within feature with custom values or breakpoint variables
//      .someclass {
//          @include bp('within', 'md') {
//              some: style;
//          }
//          @include bp('within', 1000px, 1200px) {
//              some: style;
//          }
//      }
//
// $feature     - 'min', 'max', 'within'
// $width       - 'xs', 'sm', 'md', 'lg', 'xl', 'xxl', 'xxxl', 1200px
// $within_max  - 1200px
$bpFeatures: "min",
"max",
"within";
@mixin bp($feature, $width:"", $within_max:"") {
    $stringWidth: false;
    $within_max_set: false;
    $mapWidth: null !default;
    $maxWidth: null !default;
    $minWidth: null !default;
    //if width is not blank and string, get values from $breakpoints
    @if not ($width=="") and (type-of($width)=="string") {
        @if map-has-key($bp, $width) {
            $mapWidth: map-get($bp, $width);
            $maxWidth: map-get($mapWidth, "max");
            $minWidth: map-get($mapWidth, "min");
            $stringWidth: true;
        }
    }
    //check if $within_max set and is number
    @if not($within_max=="") and type-of($within_max=="number") {
        $within_max_set: true;
    }
    // if $feature is a string
    @if type-of($feature)=="string" {
        //lowercase the string
        $feature: to-lower-case($feature);
        //if $feature within $bpFeatures
        @if index($bpFeatures, $feature) {
            // if $feature value is 'within'
            @if $feature=="within" {
                //if width is not string and $within_max has a number value
                @if (not $stringWidth and $within_max_set) or ($stringWidth and not $within_max_set) {
                    @if not $stringWidth {
                        $maxWidth: $within_max;
                        $minWidth: $width;
                    }
                    @if $maxWidth < $minWidth {
                        @error "SASS Mixin bp(): Breakpoint min and max not in correct order. Should follow: bp('within', $min, $max)";
                    }
                    @media only screen and (min-width: $minWidth) and (max-width: $maxWidth) {
                        @content;
                    }
                    //if width is string and no within max set
                }
                @else {
                    @error "SASS Mixin bp(): Width values incorrect. Values need to be within $breakpoints or a min and max number.";
                }
            }
            @else {
                @if $within_max_set {
                    @warn "SASS Mixin bp(): $within_max value not set."
                }
                @if not $stringWidth {
                    $minWidth: $width;
                    $maxWidth: $width;
                }
                @if $feature=="min" {
                    @media only screen and (min-width: $minWidth) {
                        @content;
                    }
                }
                @else if $feature=="max" {
                    @media only screen and (max-width: $maxWidth) {
                        @content;
                    }
                }
            }
        }
    }
    @else {
        @error "SASS Mixin bp(): $feature paramater not string or within $bpFeatures.";
    }
}
